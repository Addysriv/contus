/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2020-08-16 11:09:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class paymentModal_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"resources/css/customFrontPage.css\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("<!-- jQuery library -->\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- Latest compiled JavaScript -->\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.5/umd/popper.min.js\"></script>\r\n");
      out.write("\t\r\n");
      out.write("\t<script src=\"resources/js/frontPage.js\"></script>\r\n");
      out.write("\t\r\n");
      out.write("\t<script src=\"https://js.stripe.com/v3/\"></script>\r\n");
      out.write("\t\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("/* var stripe = Stripe('pk_test_51HCljJGjv13unDRNVjZNRdMZA3NUrTAwQUyDAZix6GyjqyGz0NB30EbtW0HahKdSbN8SujIc45ojwpUtFHraAaDA00JOUq9XoZ');\r\n");
      out.write(" */\r\n");
      out.write("var defaultLang='';\r\n");
      out.write("$( document ).ready(function() {\r\n");
      out.write("\t$('#paymentDiv').hide();\r\n");
      out.write("\t\r\n");
      out.write("\t$('#payButton').on(\"click\",function(){\r\n");
      out.write("\t\tdebugger;\r\n");
      out.write("\t\t/* stripe.redirectToCheckout({\r\n");
      out.write("\t\t\t  lineItems: [{\r\n");
      out.write("\t\t\t    price: 'price_1HEAUIGjv13unDRN0ROam4KV', // Replace with the ID of your price\r\n");
      out.write("\t\t\t    quantity: 1,\r\n");
      out.write("\t\t\t  }],\r\n");
      out.write("\t\t\t  mode: 'payment',\r\n");
      out.write("\t\t\t  successUrl: 'http://localhost:8080/Contus/choice',\r\n");
      out.write("\t\t\t  cancelUrl: 'http://localhost:8080/Contus/paymentCancel',\r\n");
      out.write("\t\t\t  customerEmail: 'customer@example.com',\r\n");
      out.write("\t\t\t}).then(function (result) {\r\n");
      out.write("\t\t\t  // If `redirectToCheckout` fails due to a browser or network\r\n");
      out.write("\t\t\t  // error, display the localized error message to your customer\r\n");
      out.write("\t\t\t  // using `result.error.message`.\r\n");
      out.write("\t\t\t}); */\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t$('#userEmail').on(\"change\",function(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar email=$('#userEmail').val();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\r\n");
      out.write("\t\tif(reg.test(email))\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t$('#userEmail').css(\"border-color\",\"#ccc\"); \r\n");
      out.write("\t\t\t$('#incorrectEmail').text('');\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\telse{\r\n");
      out.write("\t\t\t$('#userEmail').css(\"border-color\",\"red\"); \r\n");
      out.write("\t\t\t$('#incorrectEmail').text('Incorrect Email');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t$('#userName').on(\"change\",function(){\r\n");
      out.write("\t\tvar name=$('#userName').val();\r\n");
      out.write("\t\tif(name==\"\")\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\t$('#userEmail').css(\"border-color\",\"red\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse{\r\n");
      out.write("\t\t\t$('#userEmail').css(\"border-color\",\"#ccc\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function continueCheckout(){\r\n");
      out.write("\t\r\n");
      out.write("\tvar name=$('#userName').val();\r\n");
      out.write("\tvar email=$('#userEmail').val();\r\n");
      out.write("\tvar coupon=$('#userCoupon').val();\r\n");
      out.write("\tif(name==\"\")\r\n");
      out.write("\t{\r\n");
      out.write("\t\t$('#userName').css(\"border-color\",\"red\");\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tvar reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\r\n");
      out.write("\tif(reg.test(email))\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t$('#userEmail').css(\"border-color\",\"#ccc\"); \r\n");
      out.write("\t\t$('#incorrectEmail').text('');\r\n");
      out.write("\t\t}\r\n");
      out.write("\telse{\r\n");
      out.write("\t\t$('#userEmail').css(\"border-color\",\"red\"); \r\n");
      out.write("\t\t$('#incorrectEmail').text('Incorrect Email');\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$.ajax({ \r\n");
      out.write("        url : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/saveUser\",\r\n");
      out.write("\t\tasync : false,\r\n");
      out.write("\t\tdata : ({ \r\n");
      out.write("\t\t\tuserName : name,\r\n");
      out.write("\t\t\tuserEmail : email,\r\n");
      out.write("\t\t\tuserCoupon : coupon,\r\n");
      out.write("\t\t\t}), \r\n");
      out.write("\t\t\tsuccess : function(jqXHR) {\r\n");
      out.write("\t\t\t\talert('success');\r\n");
      out.write("\t\t\t\t$('#userInfo').hide();\r\n");
      out.write("\t\t\t\t$('#paymentDiv').show();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"userInfo\">\r\n");
      out.write("\t\t<div class=\"row\"><br><br></div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-sm-2\"></div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-sm-2\"><b>Full Name : </b></div>\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-sm-8\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<input type=\"text\" id=\"userName\" >\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\t\t\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row\"><br><br></div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-sm-2\"></div>\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-sm-2\"><b>Email : </b></div>\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-sm-8\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<input type=\"text\"  id=\"userEmail\" ><br>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<span id=\"incorrectEmail\" style=\"color:red;margin-left:16%;\"></span>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\t\t\r\n");
      out.write("\t\t\t\t\t\t   </div>\r\n");
      out.write("\t\t\t\t\t\t   <div class=\"row\"><br></div>\r\n");
      out.write("\t\t\t\t\t\t   <div class=\"row\"><div class=\"col-sm-4\"></div>\r\n");
      out.write("\t\t\t\t\t\t   <div class=\"col-sm-6\" style=\"font-size:10px;\">*\r\n");
      out.write("\t\t\t\t\t\t   Please provide correct information as this will be used for report.</div></div>\r\n");
      out.write("\t\t\t\t\t\t   \r\n");
      out.write("\t\t\t\t\t\t   <div class=\"row\"><br></div>\r\n");
      out.write("\t\t\t\t\t\t   \r\n");
      out.write("\t\t\t\t\t\t   \t\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-sm-2\"></div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-sm-2\" style=\"font-size: smaller;\"><b>Coupon Code :</b> (If any provided by company)</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"col-sm-8\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<input type=\"text\" id=\"userCoupon\" >\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\t\t\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"row\"><br><br></div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-sm-4\"></div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-sm-5\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<button type=\"button\" id=\"continueButton\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-lg vertical-center\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<span id=\"testButtonModal\" onclick=\"continueCheckout();\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tstyle=\"font-family: AvenirNext; font-size: 20px; font-weight: bold; font-stretch: normal; font-style: normal; line-height: normal; letter-spacing: 1.2px; text-align: center; color: #ffffff;\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tContinue</span>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"row\"><br></div>\r\n");
      out.write("\t\t\t\t\t\t  <div class=\"row\"><br></div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<div id=\"paymentDiv\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-sm-1\"></div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-sm-10\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<h3>Please make sure you have 20 minutes after the payment\r\n");
      out.write("\t\t\t\t\t\t\t\t\t, once test starts it cannot be canceled.<br><br></h3>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row\"><br></div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-sm-4\"></div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-sm-5\">\r\n");
      out.write("\t\t\t\t\t\t\t<button type=\"button\" id=\"payButton\" class=\"btn btn-lg vertical-center\"><span id=\"testButtonModal\" onclick=\"checkout();\" style=\"font-family: AvenirNext; font-size: 20px; font-weight: bold;\r\n");
      out.write("\t  \t\t\t\t\t\t\tfont-stretch: normal; font-style: normal; line-height: normal; letter-spacing: 1.2px; text-align: center; color: #ffffff;\">\r\n");
      out.write("\t  \t\t\t\t\t\t\t\tPay 99 SEK</span></button>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row\"><br></div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<template>\r\n");
      out.write("  <div class=\"klarna-checkout\" id=\"klarna-checkout\">\r\n");
      out.write("    <div id=\"klarna-render-checkout\" />\r\n");
      out.write("    <div v-if=\"checkout.loading\">\r\n");
      out.write("      <loading-spinner />\r\n");
      out.write("    </div>\r\n");
      out.write("    <div v-if=\"checkout.error\">\r\n");
      out.write("      Loading Klarna failed\r\n");
      out.write("    </div>\r\n");
      out.write("    <div v-if=\"checkout.snippet\" v-html=\"checkout.snippet\" /> <!-- eslint-disable-line vue/no-v-html -->\r\n");
      out.write("  </div>\r\n");
      out.write("</template>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("import { mapGetters } from 'vuex'\r\n");
      out.write("import { callApi } from '../helpers'\r\n");
      out.write("import { currentStoreView } from '@vue-storefront/core/lib/multistore'\r\n");
      out.write("import LoadingSpinner from 'theme/components/theme/blocks/AsyncSidebar/LoadingSpinner.vue'\r\n");
      out.write("import { isServer } from '@vue-storefront/core/helpers'\r\n");
      out.write("import { KlarnaEvents } from '../types'\r\n");
      out.write("import { plugins } from '../plugins'\r\n");
      out.write("export default {\r\n");
      out.write("  name: 'KlarnaCheckout',\r\n");
      out.write("  components: {\r\n");
      out.write("    LoadingSpinner\r\n");
      out.write("  },\r\n");
      out.write("  async mounted () {\r\n");
      out.write("    if (!isServer) {\r\n");
      out.write("      this.upsertOrder()\r\n");
      out.write("    }\r\n");
      out.write("  },\r\n");
      out.write("  beforeMount () {\r\n");
      out.write("    this.$bus.$on('klarna-update-order', this.configureUpdateOrder)\r\n");
      out.write("  },\r\n");
      out.write("  beforeDestroy () {\r\n");
      out.write("    this.$bus.$off('klarna-update-order')\r\n");
      out.write("  },\r\n");
      out.write("  computed: {\r\n");
      out.write("    ...mapGetters({\r\n");
      out.write("      order: 'kco/order',\r\n");
      out.write("      checkout: 'kco/checkout',\r\n");
      out.write("      totals: 'kco/platformTotals',\r\n");
      out.write("      hasTotals: 'kco/hasTotals',\r\n");
      out.write("      coupon: 'kco/coupon'\r\n");
      out.write("    })\r\n");
      out.write("  },\r\n");
      out.write("  watch: {\r\n");
      out.write("    coupon (newValue, oldValue) {\r\n");
      out.write("      if (!oldValue || newValue.code !== oldValue.code) {\r\n");
      out.write("        this.$bus.$emit('klarna-update-order')\r\n");
      out.write("      }\r\n");
      out.write("    },\r\n");
      out.write("    totals (newValue, oldValue) {\r\n");
      out.write("      if (oldValue) {\r\n");
      out.write("        if (newValue.qty !== oldValue.qty || newValue.base_grand_total !== oldValue.base_grand_total) {\r\n");
      out.write("          const storeView = currentStoreView()\r\n");
      out.write("          const countryId = this.$store.state.checkout.shippingDetails.country ? this.$store.state.checkout.shippingDetails.country : storeView.tax.defaultCountry\r\n");
      out.write("          this.$store.dispatch('cart/syncShippingMethods', {\r\n");
      out.write("            country_id: countryId\r\n");
      out.write("          })\r\n");
      out.write("          this.$bus.$emit('klarna-update-order')\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("  },\r\n");
      out.write("  methods: {\r\n");
      out.write("    setupKlarnaListeners () {\r\n");
      out.write("      const events = {}\r\n");
      out.write("      Object.values(KlarnaEvents).forEach(event => {\r\n");
      out.write("        events[event] = data => {\r\n");
      out.write("          plugins.filter(plugin => plugin.on && plugin.on[event]).forEach(plugin => {\r\n");
      out.write("            plugin.on[event](data)\r\n");
      out.write("          })\r\n");
      out.write("          this.$bus.$emit('klarna-event-' + event, data)\r\n");
      out.write("        }\r\n");
      out.write("      })\r\n");
      out.write("      callApi(api => api.on(events))\r\n");
      out.write("      // Todo: refactor\r\n");
      out.write("      this.$bus.$on('klarna-order-loaded', () => {\r\n");
      out.write("        setTimeout(async () => {\r\n");
      out.write("          const order = await this.$store.dispatch('kco/fetchOrder', this.checkout.orderId)\r\n");
      out.write("          this.onKcoAddressChange({\r\n");
      out.write("            totalSegments: this.totals.total_segments,\r\n");
      out.write("            shippingAddress: order.shipping_address\r\n");
      out.write("          })\r\n");
      out.write("        }, 2000)\r\n");
      out.write("      })\r\n");
      out.write("    },\r\n");
      out.write("    async upsertOrder () {\r\n");
      out.write("      await this.$store.dispatch('kco/createOrder')\r\n");
      out.write("      const { default: postscribe } = await import('postscribe')\r\n");
      out.write("      postscribe('#klarna-render-checkout', this.checkout.snippet)\r\n");
      out.write("      await Promise.resolve()\r\n");
      out.write("      this.setupKlarnaListeners()\r\n");
      out.write("    },\r\n");
      out.write("    async configureUpdateOrder () {\r\n");
      out.write("      if (!this.checkout.order || !this.checkout.order.order_id) {\r\n");
      out.write("        return\r\n");
      out.write("      }\r\n");
      out.write("      await this.suspendCheckout()\r\n");
      out.write("      await this.upsertOrder()\r\n");
      out.write("      await this.resumeCheckout()\r\n");
      out.write("    },\r\n");
      out.write("    suspendCheckout () {\r\n");
      out.write("      return callApi(api => api.suspend())\r\n");
      out.write("    },\r\n");
      out.write("    resumeCheckout () {\r\n");
      out.write("      return callApi(api => api.resume())\r\n");
      out.write("    },\r\n");
      out.write("    onKcoAddressChange (orderData) {\r\n");
      out.write("      if (orderData.shippingAddress.postal_code) {\r\n");
      out.write("        this.$bus.$emit('kcoAddressChange', orderData)\r\n");
      out.write("      }\r\n");
      out.write("      return callApi(api => api.on({\r\n");
      out.write("        billing_address_change: async () => {\r\n");
      out.write("          this.$bus.$emit('klarna-order-loaded')\r\n");
      out.write("        }\r\n");
      out.write("      }))\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<style lang=\"scss\">\r\n");
      out.write("div.wrapper.wrapper {\r\n");
      out.write("  height: 30vh;\r\n");
      out.write("  max-width: 100%;\r\n");
      out.write("  padding-left: 25px;\r\n");
      out.write("}\r\n");
      out.write("#klarna-unsupported-page {\r\n");
      out.write("  display: none;\r\n");
      out.write("}\r\n");
      out.write("</style>\t\t\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
